#include <iostream>
using namespace std;

#define SIZE 5

class cqueue {
    int Queue[SIZE];
    int front, rear;

public:
    cqueue() {
        front = -1;
        rear = -1;
    }

    void enqueue(int value) {
        if ((rear + 1) % SIZE == front) {
            cout << "Queue is full\n";
        } else {
            if (front == -1) // First insertion
                front = 0;
            rear = (rear + 1) % SIZE;
            Queue[rear] = value;
            cout << "Inserted: " << value << endl;
        }
    }

    void dequeue() {
        if (front == -1) {
            cout << "Queue is empty\n";
        } else {
            cout << "Element dequeued is: " << Queue[front] << endl;
            if (front == rear) {
                // Queue has become empty
                front = rear = -1;
            } else {
                front = (front + 1) % SIZE;
            }
        }
    }

    void displayqueue() {
        if (front == -1) {
            cout << "Queue is empty\n";
        } else {
            cout << "Queue elements are: ";
            int i = front;
            while (true) {
                cout << Queue[i] << " ";
                if (i == rear)
                    break;
                i = (i + 1) % SIZE;
            }
            cout << endl;
        }
    }
};

int main() {
    int choice, value;
    cqueue cq;

    while (true) {
        cout << "\n1. Enqueue\n2. Dequeue\n3. Display Queue\n4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to enqueue: ";
                cin >> value;
                cq.enqueue(value);
                break;

            case 2:
                cq.dequeue();
                break;

            case 3:
                cq.displayqueue();
                break;

            case 4:
                cout << "Exiting...\n";
                return 0;

            default:
                cout << "Invalid choice. Try again.\n";
        }
    }

    return 0;
}
